{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"1.%20%D0%A2%D0%B8%D1%82%D1%83%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9%20%D0%BB%D0%B8%D1%81%D1%82/","text":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442 \u0424\u0415\u0414\u0415\u0420\u0410\u041b\u042c\u041d\u041e\u0415 \u0413\u041e\u0421\u0423\u0414\u0410\u0420\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0412\u042b\u0421\u0428\u0415\u0413\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u00ab\u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439\u00bb \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u00ab45.04.04 \u0418\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0433\u0443\u043c\u0430\u043d\u0438\u0442\u0430\u0440\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435\u00bb \u041a\u0423\u0420\u0421\u041e\u0412\u041e\u0419 \u041f\u0420\u041e\u0415\u041a\u0422 \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST \u0438 Vue.js\" \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0411\u043e\u043d\u0434\u0430\u0440\u0435\u043d\u043a\u043e \u0413.\u0412. \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"1. \u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"1.%20%D0%A2%D0%B8%D1%82%D1%83%D0%BB%D1%8C%D0%BD%D1%8B%D0%B9%20%D0%BB%D0%B8%D1%81%D1%82/#_1","text":"\u0424\u0415\u0414\u0415\u0420\u0410\u041b\u042c\u041d\u041e\u0415 \u0413\u041e\u0421\u0423\u0414\u0410\u0420\u0421\u0422\u0412\u0415\u041d\u041d\u041e\u0415 \u0410\u0412\u0422\u041e\u041d\u041e\u041c\u041d\u041e\u0415 \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u041d\u041e\u0415 \u0423\u0427\u0420\u0415\u0416\u0414\u0415\u041d\u0418\u0415 \u0412\u042b\u0421\u0428\u0415\u0413\u041e \u041e\u0411\u0420\u0410\u0417\u041e\u0412\u0410\u041d\u0418\u042f \u0421\u0410\u041d\u041a\u0422-\u041f\u0415\u0422\u0415\u0420\u0411\u0423\u0420\u0413\u0421\u041a\u0418\u0419 \u041d\u0410\u0426\u0418\u041e\u041d\u0410\u041b\u042c\u041d\u042b\u0419 \u0418\u0421\u0421\u041b\u0415\u0414\u041e\u0412\u0410\u0422\u0415\u041b\u042c\u0421\u041a\u0418\u0419 \u0423\u041d\u0418\u0412\u0415\u0420\u0421\u0418\u0422\u0415\u0422 \u0418\u0422\u041c\u041e \u0424\u0430\u043a\u0443\u043b\u044c\u0442\u0435\u0442 \u00ab\u0418\u043d\u0444\u043e\u043a\u043e\u043c\u043c\u0443\u043d\u0438\u043a\u0430\u0446\u0438\u043e\u043d\u043d\u044b\u0445 \u0442\u0435\u0445\u043d\u043e\u043b\u043e\u0433\u0438\u0439\u00bb \u041d\u0430\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u043f\u043e\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0438 \u00ab45.04.04 \u0418\u043d\u0442\u0435\u043b\u043b\u0435\u043a\u0442\u0443\u0430\u043b\u044c\u043d\u044b\u0435 \u0441\u0438\u0441\u0442\u0435\u043c\u044b \u0432 \u0433\u0443\u043c\u0430\u043d\u0438\u0442\u0430\u0440\u043d\u043e\u0439 \u0441\u0444\u0435\u0440\u0435\u00bb \u041a\u0423\u0420\u0421\u041e\u0412\u041e\u0419 \u041f\u0420\u041e\u0415\u041a\u0422 \u043d\u0430 \u0442\u0435\u043c\u0443 \"\u0420\u0430\u0437\u0440\u0430\u0431\u043e\u0442\u043a\u0430 \u0441\u0430\u0439\u0442\u0430 \u0434\u043b\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c Django REST \u0438 Vue.js\" \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \"\u0421\u0440\u0435\u0434\u0441\u0442\u0432\u0430 \u0432\u0435\u0431-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f\" \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u0411\u043e\u043d\u0434\u0430\u0440\u0435\u043d\u043a\u043e \u0413.\u0412. \u041a33422 \u041f\u0440\u043e\u0432\u0435\u0440\u0438\u043b: \u0413\u043e\u0432\u043e\u0440\u043e\u0432 \u0410.\u0418. \u0421\u0430\u043d\u043a\u0442-\u041f\u0435\u0442\u0435\u0440\u0431\u0443\u0440\u0433 2022","title":"\u0422\u0438\u0442\u0443\u043b\u044c\u043d\u044b\u0439 \u043b\u0438\u0441\u0442"},{"location":"2.%20%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5/","text":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435 \u0426\u0435\u043b\u044c: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Django REST Framework \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 Vue.js \u2014 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439. \u0417\u0430\u0434\u0430\u0447\u0438: \u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c: \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439; \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c; \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0438\u0441\u0430; \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b, \u0442\u0435\u0441\u0442\u044b, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f. \u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430 \u0421\u0435\u0440\u0432\u0438\u0441 \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u043c \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439. \u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0438\u0441\u043a\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043b\u0430\u0441\u0442\u0435\u0439, \u0437\u0430\u043a\u0430\u0437\u043e\u0432, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432.","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"2.%20%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5/#_1","text":"","title":"\u0412\u0432\u0435\u0434\u0435\u043d\u0438\u0435"},{"location":"2.%20%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5/#_2","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u043c\u0430\u0433\u0430\u0437\u0438\u043d\u0430 \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f Django REST Framework \u0434\u043b\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0438 Vue.js \u2014 \u0434\u043b\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439.","title":"\u0426\u0435\u043b\u044c:"},{"location":"2.%20%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5/#_3","text":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u0441\u0430\u0439\u0442 \u0441\u043e \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b\u043e\u043c: \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439; \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u0430\u044f \u043f\u0430\u043d\u0435\u043b\u044c; \u0433\u043b\u0430\u0432\u043d\u0430\u044f \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0441 \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435\u043c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0435\u0439 \u0441\u0435\u0440\u0432\u0438\u0441\u0430; \u0444\u0438\u043b\u044c\u0442\u0440\u044b, \u0442\u0440\u0438\u0433\u0433\u0435\u0440\u044b, \u0442\u0435\u0441\u0442\u044b, \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0438:"},{"location":"2.%20%D0%92%D0%B2%D0%B5%D0%B4%D0%B5%D0%BD%D0%B8%D0%B5/#_4","text":"\u0421\u0435\u0440\u0432\u0438\u0441 \u0441\u043b\u0443\u0436\u0438\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u043e\u0449\u0435\u043d\u0438\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u043c \u0441\u043b\u0430\u0434\u043e\u0441\u0442\u0435\u0439. \u041e\u043d \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u043b\u044f\u0435\u0442 \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u0438 \u043f\u043e \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0443 \u0441\u043f\u0438\u0441\u043a\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432, \u043f\u0440\u043e\u0441\u043c\u043e\u0442\u0440\u0443 \u043e\u0434\u043d\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u044e \u043d\u043e\u0432\u043e\u0433\u043e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044e \u043e\u0431\u044a\u0435\u043a\u0442\u0430, \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u0438 \u0438 \u043f\u043e\u0438\u0441\u043a\u0443 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432 \u0434\u043b\u044f \u043c\u043e\u0434\u0435\u043b\u0435\u0439 \u0441\u043b\u0430\u0441\u0442\u0435\u0439, \u0437\u0430\u043a\u0430\u0437\u043e\u0432, \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0441\u0435\u0440\u0432\u0438\u0441\u0430"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/1%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/","text":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u041a\u043e\u043f\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b python manage.py \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430. RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project coPY . /project/ WORKDIR /project RUN pip install --upgrade pip RUN pip install -r requirements.txt ENTRYPOINT [\"python\", \"manage.py\"] CMD [\"runserver\", \"0.0.0.0:8000\") \u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b docker ps \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c id \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430. \u0414\u0430\u043b\u0435\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435, \u0432 \u043d\u0451\u043c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438.","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/1%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#docker","text":"","title":"\u041a\u043e\u043d\u0442\u0435\u0439\u043d\u0438\u0440\u0438\u0437\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/1%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#dockerfile","text":"\u041a\u043e\u043f\u0438\u0440\u0443\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u0444\u0430\u0439\u043b\u044b \u0432 \u0440\u0430\u0431\u043e\u0447\u0443\u044e \u0434\u0438\u0440\u0435\u043a\u0442\u043e\u0440\u0438\u044e, \u043f\u043e\u0441\u043b\u0435 \u0447\u0435\u0433\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u044e\u0442\u0441\u044f \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438. \u0414\u0430\u043b\u0435\u0435 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b python manage.py \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u0442\u0441\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0430\u044f \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u043e\u0435\u043a\u0442\u0430. RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /project coPY . /project/ WORKDIR /project RUN pip install --upgrade pip RUN pip install -r requirements.txt ENTRYPOINT [\"python\", \"manage.py\"] CMD [\"runserver\", \"0.0.0.0:8000\")","title":"Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/1%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#_1","text":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043a\u043e\u043c\u0430\u043d\u0434\u044b docker ps \u043c\u043e\u0436\u043d\u043e \u0443\u0437\u043d\u0430\u0442\u044c id \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u0430. \u0414\u0430\u043b\u0435\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043a\u043e\u043c\u0430\u043d\u0434\u044b, \u043f\u043e\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u0439 \u043d\u0438\u0436\u0435, \u0432 \u043d\u0451\u043c \u043c\u043e\u0436\u043d\u043e \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0438.","title":"\u0412\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/","text":"\u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker-compose docker-compose.yml \u0412 \u0444\u0430\u0439\u043b\u0435 docker-compose.yml \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 4 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u041e\u043d \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438. version:'3' services: candy_db: container_name: django_db image: postgres ports: - \"5432:5432\" environment: - POSTGRES_USER=user_name - POSTGRES_PASSWORD=password - POSTGRES_DB=django_db volumes: - ./dbs/postgres-data:/var/lib/postgresql server: container_name: server build: context: . dockerfile: Dockerfile command: runserver 0.0.0.0:8000 ports: - \"8000:8000\" depends_on: - candy_db front: container_name: front build: ./candy_vue ports: - \"8000:8000\" depends_on: - server pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - candy_db Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0434\u043e\u043a\u0435\u0440\u0444\u0430\u0439\u043b\u0443 \u0434\u043b\u044f \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043b\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438. FROM node:12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /front COPY . /front/ WORKDIR /front RUN npm install RUN npm install --save @jeremyhamm/vue-slider RUN npm run build CMD [\"npm\", \"run\", \"serve\"] \u0417\u0430\u043f\u0443\u0441\u043a \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u043f\u0443\u0441\u043a: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b","title":"\u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker-compose"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#docker-compose","text":"","title":"\u041e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Docker-compose"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#docker-composeyml","text":"\u0412 \u0444\u0430\u0439\u043b\u0435 docker-compose.yml \u043e\u043f\u0438\u0441\u0430\u043d\u0430 \u0440\u0430\u0431\u043e\u0442\u0430 4 \u0441\u0435\u0440\u0432\u0438\u0441\u043e\u0432. \u041e\u043d \u043f\u043e\u043c\u043e\u0436\u0435\u0442 \u0432 \u043e\u0440\u043a\u0435\u0441\u0442\u0440\u0430\u0446\u0438\u0438. version:'3' services: candy_db: container_name: django_db image: postgres ports: - \"5432:5432\" environment: - POSTGRES_USER=user_name - POSTGRES_PASSWORD=password - POSTGRES_DB=django_db volumes: - ./dbs/postgres-data:/var/lib/postgresql server: container_name: server build: context: . dockerfile: Dockerfile command: runserver 0.0.0.0:8000 ports: - \"8000:8000\" depends_on: - candy_db front: container_name: front build: ./candy_vue ports: - \"8000:8000\" depends_on: - server pgadmin: container_name: pgadmin4_container image: dpage/pgadmin4 environment: PGADMIN_DEFAULT_EMAIL: admin@admin.com PGADMIN_DEFAULT_PASSWORD: root ports: - \"5050:80\" depends_on: - candy_db","title":"docker-compose.yml"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#dockerfile","text":"\u0421\u043e\u0437\u0434\u0430\u0435\u0442\u0441\u044f \u0430\u043d\u0430\u043b\u043e\u0433\u0438\u0447\u043d\u044b\u043c \u0434\u043e\u043a\u0435\u0440\u0444\u0430\u0439\u043b\u0443 \u0434\u043b\u044f \u0431\u044d\u043a\u0435\u043d\u0434 \u0447\u0430\u0441\u0442\u0438. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u043e \u0443\u0441\u0442\u0430\u043d\u0430\u0432\u043b\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043a\u043e\u043c\u043f\u043e\u043d\u0435\u043d\u0442 \u0441\u043b\u0430\u0439\u0434\u0435\u0440\u0430 \u0434\u043b\u044f \u043d\u0430\u0432\u0438\u0433\u0430\u0446\u0438\u043e\u043d\u043d\u043e\u0439 \u043f\u0430\u043d\u0435\u043b\u0438. FROM node:12 RUN apt-get update && apt-get upgrade -y && apt-get autoclean RUN mkdir /front COPY . /front/ WORKDIR /front RUN npm install RUN npm install --save @jeremyhamm/vue-slider RUN npm run build CMD [\"npm\", \"run\", \"serve\"]","title":"Dockerfile \u0434\u043b\u044f \u0437\u0430\u043f\u0443\u0441\u043a\u0430 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u043f\u0440\u043e\u0435\u043a\u0442\u0430"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#_1","text":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0435\u0439 \u043a\u043e\u043c\u0430\u043d\u0434\u044b: \u041f\u0440\u043e\u0438\u0437\u0432\u043e\u0434\u0438\u043c \u0437\u0430\u043f\u0443\u0441\u043a:","title":"\u0417\u0430\u043f\u0443\u0441\u043a"},{"location":"1.%20%D0%9A%D0%BE%D0%BD%D1%82%D0%B5%D0%B9%D0%BD%D0%B8%D1%80%D0%B8%D0%B7%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%20%D0%BE%D1%80%D0%BA%D0%B5%D1%81%D1%82%D1%80%D0%B0%D1%86%D0%B8%D1%8F/2%20%D1%87%D0%B0%D1%81%D1%82%D1%8C/#_2","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/","text":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b \u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430. views.py class CandyList(ListAPIView): serializer_class = CandySerializer def get_queryset(self): queryset = Candy.objects.all() sort = self.request.query_params.get('sort') if sort: queryset = queryset.filter(sort=sort) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u0446\u0435\u043d\u0435 \u041f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435. views.py class CandyList(ListAPIView): serializer_class = CandySerializer def get_queryset(self): queryset = Candy.objects.all() sort = self.request.query_params.get('sort') price = self.request.query_params.get('price') if sort: queryset = queryset.filter(sort=sort) if price: queryset = queryset.filter(price=price) return queryset \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u043b\u0430\u0441\u0442\u0438 \u0438 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443 \u0412\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d. views.py class ClientList(ListaPIView): serializer_class = ClientSerializer def get_queryset(self): queryset = Client.objects.all() if self.request.user.is_authenticated: sort = self.request.query_params.get('sort') name = self.request.query_params.get('name') if sort: queryset = queryset.filter(sort=sort) if name: queryset = queryset. filter(name=name) return queryset \u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0414\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 django-filters. \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0446\u0435\u043d\u0435 views.py class CandyList(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['price'] \u041f\u043e\u0438\u0441\u043a \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u0446\u0435\u043d\u0435 views.py class CandySearch(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['sort', \u2018price'] \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d \u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u0438 views.py class CandySearchRange(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [filters.DjangoFilterBackend] filterset_class = CandyRangeFilter filters.py from django_filters import rest_framework as filters from .models import * class CandyRangeFilter(filters.FilterSet): price = filters.RangeFilter() candy = filters.CandyFilter(fields=(('price')) class Meta: model = Candy fields = ['price']","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_1","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_2","text":"","title":"\u0420\u0443\u0447\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_3","text":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u0435\u0442\u0441\u044f \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy","text":"class CandyList(ListAPIView): serializer_class = CandySerializer def get_queryset(self): queryset = Candy.objects.all() sort = self.request.query_params.get('sort') if sort: queryset = queryset.filter(sort=sort) return queryset","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_4","text":"\u041f\u0440\u0438\u043d\u0438\u043c\u0430\u044e\u0442\u0441\u044f 2 \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0430 \u0438\u0437 url-\u0430\u0434\u0440\u0435\u0441\u0430, \u0432\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u0446\u0435\u043d\u0435"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy_1","text":"class CandyList(ListAPIView): serializer_class = CandySerializer def get_queryset(self): queryset = Candy.objects.all() sort = self.request.query_params.get('sort') price = self.request.query_params.get('price') if sort: queryset = queryset.filter(sort=sort) if price: queryset = queryset.filter(price=price) return queryset","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_5","text":"\u0412\u044b\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u043e\u0442\u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435, \u0435\u0441\u043b\u0438 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u043e\u0432\u0430\u043d.","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0442\u0438\u043f\u0443 \u0441\u043b\u0430\u0441\u0442\u0438 \u0438 \u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e\u043c\u0443"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy_2","text":"class ClientList(ListaPIView): serializer_class = ClientSerializer def get_queryset(self): queryset = Client.objects.all() if self.request.user.is_authenticated: sort = self.request.query_params.get('sort') name = self.request.query_params.get('name') if sort: queryset = queryset.filter(sort=sort) if name: queryset = queryset. filter(name=name) return queryset","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_6","text":"\u0414\u0430\u043d\u043d\u044b\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 django-filters.","title":"\u0410\u0432\u0442\u043e\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u0438\u0435 \u0444\u0438\u043b\u044c\u0442\u0440\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_7","text":"","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0446\u0435\u043d\u0435"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy_3","text":"class CandyList(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [DjangoFilterBackend] filterset_fields = ['price']","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_8","text":"","title":"\u041f\u043e\u0438\u0441\u043a \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u0438 \u0446\u0435\u043d\u0435"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy_4","text":"class CandySearch(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [DjangoFilterBackend, SearchFilter] search_fields = ['sort', \u2018price']","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#_9","text":"","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0432 \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435 \u0446\u0435\u043d \u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u0438"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#viewspy_5","text":"class CandySearchRange(ListAPIView): queryset = Candy.objects.all() serializer_class = CandySerializer filter_backends = [filters.DjangoFilterBackend] filterset_class = CandyRangeFilter","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.1%20%D0%A4%D0%B8%D0%BB%D1%8C%D1%82%D1%80%D1%8B/#filterspy","text":"from django_filters import rest_framework as filters from .models import * class CandyRangeFilter(filters.FilterSet): price = filters.RangeFilter() candy = filters.CandyFilter(fields=(('price')) class Meta: model = Candy fields = ['price']","title":"filters.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/","text":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f settings.py REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 5 } \u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. pagination.py from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'page': self.page.number, 'number_of_pages': self.page.paginator.num_pages, 'pesults': data, 'Links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, }) views.py class EmployeeListAPIView(ListAPIView): serializer_class = EmployeeSerializer queryset = Employee.objects.all() pagination_class = CustomPagination","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/#_1","text":"","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/#settingspy","text":"REST_FRAMEWORK = { 'DEFAULT_AUTHENTICATION_CLASSES': ( 'rest_framework.authentication.TokenAuthentication', ), 'DEFAULT_FILTER_BACKENDS': ['django_filters.rest_framework.DjangoFilterBackend'], 'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.LimitOffsetPagination', 'PAGE_SIZE': 5 }","title":"settings.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/#_2","text":"\u0412\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u0438 \u043d\u043e\u043c\u0435\u0440 \u0442\u0435\u043a\u0443\u0449\u0435\u0439 \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u041a\u0430\u0441\u0442\u043e\u043c\u043d\u0430\u044f \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/#paginationpy","text":"from rest_framework import pagination from rest_framework.response import Response class CustomPagination(pagination.PageNumberPagination): def get_paginated_response(self, data): return Response({ 'page': self.page.number, 'number_of_pages': self.page.paginator.num_pages, 'pesults': data, 'Links': { 'next': self.get_next_link(), 'previous': self.get_previous_link() }, })","title":"pagination.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.2%20%D0%9F%D0%B0%D0%B3%D0%B8%D0%BD%D0%B0%D1%86%D0%B8%D1%8F/#viewspy","text":"class EmployeeListAPIView(ListAPIView): serializer_class = EmployeeSerializer queryset = Employee.objects.all() pagination_class = CustomPagination","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/","text":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432 \u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430 models.py def file_path(instance, filename): return 'images/{0}/{1}'.format(instance.employee, filename) class EmployeePhoto(models.Model): employee = models.ForeignKey('employee', on_delete=models.CASCADE, verbose_name='employee') filename = models.CharField(max_length=50, verbose_name='File name') size = models. IntegerField(verbose_name='File size') file = models.FileField(validators=[validate_file], upload_to=file_path) def save(self, *args, **kwargs): self.size = self.file.size self.filename = self.file.name super(EmployeePhoto, self).save(*xargs, **kwargs) validators.py from django.core.exceptions import ValidationError import magic def validate_file(file_upload): file_type = magic.from_buffer(file_upload.read(), mime=True) if file_type not in ('image/png', 'image/jpeg', 'image/jpg'): raise ValidationError('\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PNG \u0438\u043b\u0438 JPG.') if file_upload.size > 1024 * 1024: raise ValidationError('\u0424\u0430\u0439\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.') serializer.py class EmployeePhotoSerializer(serializers.ModelSerializer): class Meta: model = EmployeePhoto fields = ['employee', 'file'] views.py class EmployeePhotoAPIView(CreateAPIView) : queryset = EmployeePhoto.objects.all() serializer_class = EmployeePhotoSerializer \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_1","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u0438 \u0432\u0430\u043b\u0438\u0434\u0430\u0446\u0438\u044f \u0444\u0430\u0439\u043b\u043e\u0432"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_2","text":"","title":"\u0417\u0430\u0433\u0440\u0443\u0437\u043a\u0430 \u043e\u0434\u043d\u043e\u0433\u043e \u0444\u0430\u0439\u043b\u0430"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#modelspy","text":"def file_path(instance, filename): return 'images/{0}/{1}'.format(instance.employee, filename) class EmployeePhoto(models.Model): employee = models.ForeignKey('employee', on_delete=models.CASCADE, verbose_name='employee') filename = models.CharField(max_length=50, verbose_name='File name') size = models. IntegerField(verbose_name='File size') file = models.FileField(validators=[validate_file], upload_to=file_path) def save(self, *args, **kwargs): self.size = self.file.size self.filename = self.file.name super(EmployeePhoto, self).save(*xargs, **kwargs)","title":"models.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#validatorspy","text":"from django.core.exceptions import ValidationError import magic def validate_file(file_upload): file_type = magic.from_buffer(file_upload.read(), mime=True) if file_type not in ('image/png', 'image/jpeg', 'image/jpg'): raise ValidationError('\u0417\u0430\u0433\u0440\u0443\u0437\u0438\u0442\u0435 \u0432 \u0444\u043e\u0440\u043c\u0430\u0442\u0435 PNG \u0438\u043b\u0438 JPG.') if file_upload.size > 1024 * 1024: raise ValidationError('\u0424\u0430\u0439\u043b \u0441\u043b\u0438\u0448\u043a\u043e\u043c \u0431\u043e\u043b\u044c\u0448\u043e\u0439.')","title":"validators.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#serializerpy","text":"class EmployeePhotoSerializer(serializers.ModelSerializer): class Meta: model = EmployeePhoto fields = ['employee', 'file']","title":"serializer.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#viewspy","text":"class EmployeePhotoAPIView(CreateAPIView) : queryset = EmployeePhoto.objects.all() serializer_class = EmployeePhotoSerializer","title":"views.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.3.%20%D0%97%D0%B0%D0%B3%D1%80%D1%83%D0%B7%D0%BA%D0%B0%20%D1%84%D0%B0%D0%B9%D0%BB%D0%BE%D0%B2/#_3","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/","text":"C\u0438\u0433\u043d\u0430\u043b\u044b 1. \u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. signals.py from django.db.models.signals import post_save from django.dispatch import receiver from .models import * @receiver(post_save, sender=Client) def create_candy(sender, instance, created, **kwargs): if created: print(f':'\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u044c: {instance.name} {instance.sort}.') 2. \u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430. signals.py @receiver(pre_save, sender=Employee) def update_employee(sender, instance, **kwargs): current = Employee.objects.get(id=instance.id) if instance.phone != current.phone: instance.old_phone = current.phone print(f'\u041d\u043e\u0432\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d.') else: print('\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c.') 3. \u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433. signals.py @receiver(pre_delete, sender=Client) def delete_candy(sender, instance, **kwargs): with open('deleted_candies.txt', 'a') as f: f.write(f'\u0421\u043b\u0430\u0441\u0442\u044c {instance.name} {instance.sort} \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430.')","title":"C\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#c","text":"","title":"C\u0438\u0433\u043d\u0430\u043b\u044b"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#1","text":"\u0412\u044b\u0437\u044b\u0432\u0430\u0435\u0442 \u043b\u043e\u0433\u0438\u043a\u0443 \u0432\u043e \u0432\u0440\u0435\u043c\u044f \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u044f \u044d\u043a\u0437\u0435\u043c\u0430\u043b\u044f\u0440\u0430 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.","title":"1."},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#signalspy","text":"from django.db.models.signals import post_save from django.dispatch import receiver from .models import * @receiver(post_save, sender=Client) def create_candy(sender, instance, created, **kwargs): if created: print(f':'\u0414\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u044c: {instance.name} {instance.sort}.')","title":"signals.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#2","text":"\u0421\u043e\u0445\u0440\u0430\u043d\u044f\u0435\u0442 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u044b\u0445 \u043f\u043e\u043b\u0435\u0439 \u0432 \u0442\u0430\u0431\u043b\u0438\u0446\u0435 \u0432 \u0441\u043f\u0435\u0446\u0438\u0430\u043b\u044c\u043d\u044b\u0435 \u043f\u043e\u043b\u044f \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u0435\u0434\u044b\u0434\u0443\u0449\u0438\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \u043f\u0440\u0438 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430.","title":"2."},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#signalspy_1","text":"@receiver(pre_save, sender=Employee) def update_employee(sender, instance, **kwargs): current = Employee.objects.get(id=instance.id) if instance.phone != current.phone: instance.old_phone = current.phone print(f'\u041d\u043e\u0432\u044b\u0439 \u0442\u0435\u043b\u0435\u0444\u043e\u043d \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u0437\u0430\u043f\u0438\u0441\u0430\u043d.') else: print('\u041d\u043e\u043c\u0435\u0440 \u0442\u0435\u043b\u0435\u0444\u043e\u043d\u0430 \u0441\u043e\u0432\u043f\u0430\u0434\u0430\u0435\u0442 \u0441 \u0443\u0436\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c.')","title":"signals.py"},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#3","text":"\u041f\u0440\u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u0437\u0430\u043f\u0438\u0441\u044b\u0432\u0430\u0435\u0442 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u0438 \u0432 \u043b\u043e\u0433.","title":"3."},{"location":"2.%20%D0%92%D0%BE%D0%B7%D0%BC%D0%BE%D0%B6%D0%BD%D0%BE%D1%81%D1%82%D0%B8%20Django%20REST/2.4.%20%D0%A1%D0%B8%D0%B3%D0%BD%D0%B0%D0%BB%D1%8B/#signalspy_2","text":"@receiver(pre_delete, sender=Client) def delete_candy(sender, instance, **kwargs): with open('deleted_candies.txt', 'a') as f: f.write(f'\u0421\u043b\u0430\u0441\u0442\u044c {instance.name} {instance.sort} \u0431\u044b\u043b\u0430 \u0443\u0434\u0430\u043b\u0435\u043d\u0430.')","title":"signals.py"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.1/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c \u0422\u0435\u0441\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044f name \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Employee from django.test import TestCase from .models import * class EmployeeModelTest(TestCase) : @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_name_label(self): employee = Employee.objects.get(id=1) field_label = employee._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Name') \u0422\u0435\u0441\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u043b\u044f candy class LenghtModelTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_text_max_length(self): candyname = Candy.objects.get(id=1) max_length = candyname._meta.get_field('name').max_length seLf.assertequats(max_tength, 100) \u0422\u0435\u0441\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 Candy class CandyModelTest (TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_object_name_and_sort(self): candy = Candy.objects.get(id=1) expected_object_name = str(candy.name) +\" \" + str(candy.sort) seLf-assertEquals(expected_object_name, str(candy))","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.1/#_1","text":"","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 \u043c\u043e\u0434\u0435\u043b\u044c"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.1/#name-employee","text":"from django.test import TestCase from .models import * class EmployeeModelTest(TestCase) : @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_name_label(self): employee = Employee.objects.get(id=1) field_label = employee._meta.get_field('name').verbose_name self.assertEquals(field_label, 'Name')","title":"\u0422\u0435\u0441\u0442 \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u044f \u043f\u043e\u043b\u044f name \u0432 \u043c\u043e\u0434\u0435\u043b\u0438 Employee"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.1/#candy","text":"class LenghtModelTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_text_max_length(self): candyname = Candy.objects.get(id=1) max_length = candyname._meta.get_field('name').max_length seLf.assertequats(max_tength, 100)","title":"\u0422\u0435\u0441\u0442 \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0439 \u0434\u043b\u0438\u043d\u044b \u043f\u043e\u043b\u044f candy"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.1/#candy_1","text":"class CandyModelTest (TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_object_name_and_sort(self): candy = Candy.objects.get(id=1) expected_object_name = str(candy.name) +\" \" + str(candy.sort) seLf-assertEquals(expected_object_name, str(candy))","title":"\u0422\u0435\u0441\u0442 \u043e\u0431\u044a\u0435\u043a\u0442\u0430 \u043c\u043e\u0434\u0435\u043b\u0438 Candy"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.2/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0422\u0435\u0441\u0442 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0435 class EmployeeGetTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_get_employee(self): url = reverse('candy_app:employee', args=['1']) data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043b\u0430\u0441\u0442\u0438 class CandyGetTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_get_candy(self): url = reverse('candy_app:candies', args=['1']) data = {'name': 'Ferrero Rocher', 'sort': '\u041a\u043e\u043d\u0444\u0435\u0442\u044b', 'price': 400} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u044c \u043f\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0443 class CandySearchTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') Candy.objects.create(client=Client.objects.get(id=1), candy='Ferrero Rocher') def test_get_candies(self): self.maxDiff = None url = reverse('candy_app:candies') data = {'count': 1, 'next': None, 'previous': None, 'results': [{\"id\": 1, \"client\": 1, \"candy\": 'Ferrero Rocher'}]} response = self.client.get(url, {'search': 'kaeya'}, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.2/#get","text":"","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 GET \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.2/#_1","text":"class EmployeeGetTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_get_employee(self): url = reverse('candy_app:employee', args=['1']) data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0435"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.2/#_2","text":"class CandyGetTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_get_candy(self): url = reverse('candy_app:candies', args=['1']) data = {'name': 'Ferrero Rocher', 'sort': '\u041a\u043e\u043d\u0444\u0435\u0442\u044b', 'price': 400} response = self.client.get(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0441\u043b\u0430\u0441\u0442\u0438"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.2/#_3","text":"class CandySearchTest(TestCase): @classmethod def setUpTestData(cls): Client.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') Candy.objects.create(client=Client.objects.get(id=1), candy='Ferrero Rocher') def test_get_candies(self): self.maxDiff = None url = reverse('candy_app:candies') data = {'count': 1, 'next': None, 'previous': None, 'results': [{\"id\": 1, \"client\": 1, \"candy\": 'Ferrero Rocher'}]} response = self.client.get(url, {'search': 'kaeya'}, data, format='json') self.assertEqual(response.status_code, status.HTTP_200_OK) self.assertEqual(response.json(), data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u0441\u043b\u0430\u0441\u0442\u044c \u043f\u043e \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0443"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.3/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0422\u0435\u0441\u0442 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 class EmployeeCreateTest(TestCase): def test_create_employee(self): url = reverse('candy_app:employee-create') data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0430\u0441\u0442\u0438 class CandyCreateTest(TestCase): def test_create_candy(self): url = reverse('candy_app:candy-create') data = {'id': 1, 'name': 'Ferrero Rocher', '\u041a\u043e\u043d\u0444\u0435\u0442\u044b': '400', 'price'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430 class RequestCreateTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_create_request(self): url = reverse('candy_app:request-create') data = {\"id\": 1, \"candy\": 1, \"name\": '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.3/#post","text":"","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 POST \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.3/#_1","text":"class EmployeeCreateTest(TestCase): def test_create_employee(self): url = reverse('candy_app:employee-create') data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.3/#_2","text":"class CandyCreateTest(TestCase): def test_create_candy(self): url = reverse('candy_app:candy-create') data = {'id': 1, 'name': 'Ferrero Rocher', '\u041a\u043e\u043d\u0444\u0435\u0442\u044b': '400', 'price'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u043b\u0430\u0441\u0442\u0438"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.3/#_3","text":"class RequestCreateTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_create_request(self): url = reverse('candy_app:request-create') data = {\"id\": 1, \"candy\": 1, \"name\": '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447'} response = self.client.post(url, data, format='json') self.assertEqual(response.status_code, status.HTTP_201_CREATED) self.assertEqual(response.data, data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u043f\u043e\u0440\u0443\u0447\u0435\u043d\u0438\u0435 \u0437\u0430\u043a\u0430\u0437\u0430"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/","text":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0422\u0435\u0441\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 class EmployeeUpdateTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_update_employee(self): self.maxDiff = None url = reverse('candy_app:employee-update', args=['1']) data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['candy'] = 'Ferrero Rocher' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 class EmployeeUpdateTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='artem', password='yay228', passport='4633 754599', name='\u0414\u043e\u043b\u0433\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u0415\u0433\u043e\u0440\u043e\u0432\u0438\u0447', phone_number='+79039856794') def test_update_employee(self): self.maxDiff = None url = reverse('candy_app:employee-update', args=['1']) data = {'id': 1, 'is_superuser': False, 'email': '', 'is_staff': True, 'is_active': True, 'passport': '4633 754599', 'name': '\u0414\u043e\u043b\u0433\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u0415\u0433\u043e\u0440\u043e\u0432\u0438\u0447', 'user_permissions': []} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['passport'] = '6679 943251' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) \u0422\u0435\u0441\u0442 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043b\u0430\u0441\u0442\u0438 class CandyUpdateTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_update_candy(self): self.maxDiff = None url = reverse('candy_app:candy-update', args=['1']) data = {'name': 'Ferrero Rocher', 'sort': '\u041a\u043e\u043d\u0444\u0435\u0442\u044b', 'price': 400} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['price'] = 550 response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data) \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/#patch","text":"","title":"\u0422\u0435\u0441\u0442\u044b \u043d\u0430 PATCH \u0437\u0430\u043f\u0440\u043e\u0441\u044b"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/#_1","text":"class EmployeeUpdateTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(name='\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', phone_number='+79949788813', passport='4952 931368') def test_update_employee(self): self.maxDiff = None url = reverse('candy_app:employee-update', args=['1']) data = {'id': 1, 'name': '\u0425\u0430\u0440\u0438\u0442\u043e\u043d\u043e\u0432 \u041b\u0443\u043a\u0430 \u0418\u043b\u044c\u0438\u0447', 'phone_number': '+79949788813', 'passport'= 4952 931368} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['candy'] = 'Ferrero Rocher' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"\u0422\u0435\u0441\u0442 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0438 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/#_2","text":"class EmployeeUpdateTest(TestCase): @classmethod def setUpTestData(cls): Employee.objects.create(username='artem', password='yay228', passport='4633 754599', name='\u0414\u043e\u043b\u0433\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u0415\u0433\u043e\u0440\u043e\u0432\u0438\u0447', phone_number='+79039856794') def test_update_employee(self): self.maxDiff = None url = reverse('candy_app:employee-update', args=['1']) data = {'id': 1, 'is_superuser': False, 'email': '', 'is_staff': True, 'is_active': True, 'passport': '4633 754599', 'name': '\u0414\u043e\u043b\u0433\u043e\u0432 \u0410\u0440\u0442\u0451\u043c \u0415\u0433\u043e\u0440\u043e\u0432\u0438\u0447', 'user_permissions': []} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['passport'] = '6679 943251' response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/#_3","text":"class CandyUpdateTest(TestCase): @classmethod def setUpTestData(cls): Candy.objects.create(name='Ferrero Rocher', sort='\u041a\u043e\u043d\u0444\u0435\u0442\u044b', price='400') def test_update_candy(self): self.maxDiff = None url = reverse('candy_app:candy-update', args=['1']) data = {'name': 'Ferrero Rocher', 'sort': '\u041a\u043e\u043d\u0444\u0435\u0442\u044b', 'price': 400} response_retrieve = self.client.get(url, format='json') self.assertEqual(response_retrieve.status_code, status.HTTP_200_OK) self.assertEqual(response_retrieve.json(), data) data['price'] = 550 response_update = self.client.put(url, data, content_type='application/json') self.assertEqual(response_update.status_code, status.HTTP_200_OK) self.assertEqual(response_update.json(), data)","title":"\u0422\u0435\u0441\u0442 \u043d\u0430 \u043e\u0431\u043d\u043e\u0432\u043b\u0435\u043d\u0438\u0435 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0441\u043b\u0430\u0441\u0442\u0438"},{"location":"3.%20%D0%A2%D0%B5%D1%81%D1%82%D1%8B%20Django%20REST%20Framework/3.1.4/#_4","text":"","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/","text":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432 \u0421\u043e\u0437\u0434\u0430\u043d\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0441\u043b\u043e\u0432\u0443, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438. \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432: - \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 - \u043f\u043e \u0446\u0435\u043d\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443: \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0446\u0435\u043d\u0435: \u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u043b\u0430\u0441\u0442\u0435\u0439: \u041f\u043e\u0438\u0441\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443 \u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430. \u0414\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443: \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443: \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443 \u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u043e\u0432 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0441\u043b\u0430\u0441\u0442\u0438. \u0414\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0442\u0438\u043f\u0443: \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0432 \"\u041a\u043e\u043d\u0444\u0435\u0442\u044b\" \u0438 \"\u041f\u0435\u0447\u0435\u043d\u044c\u0435\": \u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438 \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0432\u043e\u0434\u0430 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \"\u043e\u0442\" \u0438 \"\u0434\u043e\", \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0432 \u0446\u0435\u043d\u043e\u0432\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0414\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430: \u041f\u043e\u0441\u043b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430:","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_1","text":"\u0421\u043e\u0437\u0434\u0430\u043d\u044b \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b \u0434\u043b\u044f \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0441\u043b\u043e\u0432\u0443, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432 \u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438.","title":"\u041e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u043e\u0432"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_2","text":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432: - \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443 - \u043f\u043e \u0446\u0435\u043d\u0435 \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0443: \u041f\u0440\u0438\u043c\u0435\u0440 \u0441\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0438 \u043f\u043e \u0446\u0435\u043d\u0435:","title":"\u0421\u043e\u0440\u0442\u0438\u0440\u043e\u0432\u043a\u0430 \u0441\u043f\u0438\u0441\u043a\u0430 \u0437\u0430\u043a\u0430\u0437\u043e\u0432"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_3","text":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u043c\u043e\u0436\u043d\u043e \u0431\u044b\u0441\u0442\u0440\u043e \u043e\u0440\u0438\u0435\u043d\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u043f\u043e \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0435. \u041f\u0440\u0438\u043c\u0435\u0440 \u043f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u0438 \u043d\u0430 \u0441\u043f\u0438\u0441\u043a\u0435 \u0441\u043b\u0430\u0441\u0442\u0435\u0439:","title":"\u041f\u0430\u0433\u0438\u043d\u0430\u0446\u0438\u044f"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_4","text":"\u041d\u0430\u0445\u043e\u0436\u0434\u0435\u043d\u0438\u0435 \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0430 \u043f\u043e \u0432\u0432\u0435\u0434\u0451\u043d\u043d\u043e\u043c\u0443 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0430. \u0414\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443: \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443:","title":"\u041f\u043e\u0438\u0441\u043a \u0441\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u043e\u0432 \u043f\u043e \u043f\u0430\u0441\u043f\u043e\u0440\u0442\u0443"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_5","text":"\u041f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0447\u0435\u043a\u0431\u043e\u043a\u0441\u043e\u0432 \u0432\u044b\u0431\u0438\u0440\u0430\u0435\u0442\u0441\u044f \u0442\u0438\u043f \u0436\u0435\u043b\u0430\u0435\u043c\u043e\u0439 \u0441\u043b\u0430\u0441\u0442\u0438. \u0414\u043e \u043f\u043e\u0438\u0441\u043a\u0430 \u043f\u043e \u0442\u0438\u043f\u0443: \u041f\u043e\u0441\u043b\u0435 \u043f\u043e\u0438\u0441\u043a\u0430 \u0442\u043e\u043b\u044c\u043a\u043e \u0434\u043b\u044f \u0442\u0438\u043f\u043e\u0432 \"\u041a\u043e\u043d\u0444\u0435\u0442\u044b\" \u0438 \"\u041f\u0435\u0447\u0435\u043d\u044c\u0435\":","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0441\u043b\u0430\u0441\u0442\u0435\u0439 \u043f\u043e \u0442\u0438\u043f\u0443"},{"location":"4.%20%D0%90%D0%B4%D0%B0%D0%BF%D1%82%D0%B0%D1%86%D0%B8%D1%8F%20%D0%B8%D0%BD%D1%82%D0%B5%D1%80%D1%84%D0%B5%D0%B9%D1%81%D0%BE%D0%B2%20Vue.js/#_6","text":"\u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0432\u0432\u043e\u0434\u0430 \u0436\u0435\u043b\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u0439 \"\u043e\u0442\" \u0438 \"\u0434\u043e\", \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u0441\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u0432 \u0446\u0435\u043d\u043e\u0432\u043e\u043c \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0435. \u0414\u043e \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430: \u041f\u043e\u0441\u043b\u0435 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0435\u043d\u0438\u044f \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0430:","title":"\u0424\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044f \u0437\u0430\u043a\u0430\u0437\u043e\u0432 \u043f\u043e \u0434\u0438\u0430\u043f\u0430\u0437\u043e\u043d\u0443 \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u0438"},{"location":"%D0%92%D1%8B%D0%B2%D0%BE%D0%B4%D1%8B/","text":"\u0412\u044b\u0432\u043e\u0434\u044b \u041f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u043c \u0441\u043b\u0430\u0441\u0442\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. \u0414\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d Django REST, \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 - Vue.js. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0441\u0430\u0439\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0443\u0434\u0430\u043b\u044f\u0442\u044c, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"},{"location":"%D0%92%D1%8B%D0%B2%D0%BE%D0%B4%D1%8B/#_1","text":"\u041f\u043e \u0437\u0430\u0432\u0435\u0440\u0448\u0435\u043d\u0438\u0438 \u043a\u0443\u0440\u0441\u043e\u0432\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u044b \u0432\u0441\u0435 \u0437\u0430\u0434\u0430\u0447\u0438. \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d \u0441\u0430\u0439\u0442 \u0434\u043b\u044f \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u044f \u0438\u043d\u0442\u0435\u0440\u043d\u0435\u0442-\u043c\u0430\u0433\u0430\u0437\u0438\u043d\u043e\u043c \u0441\u043b\u0430\u0441\u0442\u0435\u0439, \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u0438\u043d\u0442\u0435\u0440\u0444\u0435\u0439\u0441\u044b. \u0414\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u044b\u043b \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d Django REST, \u0434\u043b\u044f \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 - Vue.js. \u0421 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0440\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u0439 \u0441\u0430\u0439\u0442 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u0440\u043e\u0441\u043c\u0430\u0442\u0440\u0438\u0432\u0430\u0442\u044c, \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u0442\u044c, \u0443\u0434\u0430\u043b\u044f\u0442\u044c, \u0444\u0438\u043b\u044c\u0442\u0440\u043e\u0432\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e.","title":"\u0412\u044b\u0432\u043e\u0434\u044b"}]}